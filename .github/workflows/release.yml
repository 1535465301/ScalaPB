name: Release

on:
  push:
    branches: [master]
    tags: ["v*"]

jobs:
  publish:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: Ruby caches
      uses: actions/cache@v2
      with:
        path: .cicd/jekyll/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('.cicd/**/Gemfile.lock') }}
        restore-keys: |
            ${{ runner.os }}-gems-
    - name: Scala caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.cache/coursier
        key: ${{ runner.os }}-sbt-docs-${{ hashFiles('**/*.sbt') }}
    - uses: actions/setup-java@v1
      with:
        java-version: 8
    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - name: Install jekyll
      run: ./.cicd/install_jekyll.sh
    - name: Update docs
      run: |
        git config --global user.name "ScalaPB Docs"
        git config --global user.email "scalapb-updater@users.noreply.github.com"
        eval "$(ssh-agent -s)"
        echo "$TOKEN" | ssh-add -
        .cicd/push_website.sh
      env:
          TOKEN: ${{secrets.DEPLOY_KEY}}
    - uses: olafurpg/setup-gpg@v2
      if: startsWith(github.ref, 'refs/tags/v')
    - name: Publish ${{ github.ref }}
      run: sbt ci-release
      env:
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}

  scalapbc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: 8
    - run: |
        sbt scalapbc/universal:packageBin
    - uses: actions/upload-artifact@v2
      with:
        name: scalapbc
        path: scalapbc/target/universal/scalapbc-*.zip

  native:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          arch: linux-x86_64
        - os: macos-10.15
          arch: osx-x86_64
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v1
    - uses: olafurpg/setup-scala@v5
      with:
        java-version: graalvm@20.1
    - name: Asset name
      id: vars
      run: |
        if [[ $GITHUB_REF = refs/tags/v* ]]; then
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
        else
          RELEASE_VERSION=SNAPSHOT
        fi
        echo ::set-env name=ASSET::protoc-gen-scala-${RELEASE_VERSION}-${{matrix.arch}}

    - name: build native image
      run: |
        set -x
        gu install native-image
        ./make_reflect_config.sh
        sbt protocGenScalaUnix/graalvm-native-image:packageBin
        zip -j $ASSET.zip protocGenScalaUnix/target/graalvm-native-image/protoc-gen-scala

    - uses: actions/upload-artifact@v2
      with:
        name: ${{env.ASSET}}
        path: ${{env.ASSET}}.zip

  gh_release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    needs: [native, scalapbc]
    steps:
    - uses: actions/checkout@v1
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ./artifacts
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -x
        assets=$(find ./artifacts -name "*.zip" -printf "-a %p ")
        RELEASE_NAME=${GITHUB_REF#refs/tags/}
        hub release create ${assets} -m "$RELEASE_NAME" "$RELEASE_NAME"
